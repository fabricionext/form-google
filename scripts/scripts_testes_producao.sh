#!/bin/bash
# Scripts pr√°ticos para testes em produ√ß√£o

URL_BASE="https://appform.estevaoalmeida.com.br"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_DIR="logs_teste_$TIMESTAMP"

# Criar diret√≥rio de logs
mkdir -p $LOG_DIR

echo "üöÄ INICIANDO TESTES DE PRODU√á√ÉO - $TIMESTAMP"
echo "üìÅ Logs em: $LOG_DIR"

# Fun√ß√£o para logs coloridos
log_success() { echo -e "\033[32m‚úÖ $1\033[0m" | tee -a "$LOG_DIR/teste.log"; }
log_error() { echo -e "\033[31m‚ùå $1\033[0m" | tee -a "$LOG_DIR/teste.log"; }
log_warning() { echo -e "\033[33m‚ö†Ô∏è  $1\033[0m" | tee -a "$LOG_DIR/teste.log"; }
log_info() { echo -e "\033[34m‚ÑπÔ∏è  $1\033[0m" | tee -a "$LOG_DIR/teste.log"; }

# TESTE 1: Verificar se aplica√ß√£o est√° online
test_app_online() {
    log_info "Testando se aplica√ß√£o est√° online..."
    
    HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "$URL_BASE/" --max-time 10)
    
    if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
        log_success "Aplica√ß√£o online - HTTP $HTTP_CODE"
        return 0
    else
        log_error "Aplica√ß√£o offline ou com problema - HTTP $HTTP_CODE"
        return 1
    fi
}

# TESTE 2: Valida√ß√£o de CPF segura
test_cpf_validation() {
    log_info "Testando valida√ß√£o de CPF..."
    
    # CPF v√°lido
    RESPONSE=$(curl -s "$URL_BASE/api/clientes/busca_cpf?cpf=123.456.789-00" --max-time 10)
    if [[ $? -eq 0 ]]; then
        log_success "CPF v√°lido aceito"
        echo "Response: $RESPONSE" >> "$LOG_DIR/cpf_valido.json"
    else
        log_error "Falha no teste de CPF v√°lido"
    fi
    
    # CPF malicioso
    HTTP_CODE_MAL=$(curl -s -w "%{http_code}" -o /dev/null "$URL_BASE/api/clientes/busca_cpf?cpf=123<script>alert(1)" --max-time 10)
    RESPONSE_MAL=$(curl -s "$URL_BASE/api/clientes/busca_cpf?cpf=123<script>alert(1)" --max-time 10)
    if [ "$HTTP_CODE_MAL" = "400" ] || echo "$RESPONSE_MAL" | grep -q "error"; then
        log_success "CPF malicioso rejeitado corretamente (HTTP $HTTP_CODE_MAL)"
    else
        log_error "CPF malicioso N√ÉO foi rejeitado - RISCO DE SEGURAN√áA! (HTTP $HTTP_CODE_MAL)"
    fi
    echo "Response malicioso (HTTP $HTTP_CODE_MAL): $RESPONSE_MAL" >> "$LOG_DIR/cpf_malicioso.json"
}

# TESTE 3: Headers de seguran√ßa
test_security_headers() {
    log_info "Verificando headers de seguran√ßa..."
    
    HEADERS=$(curl -s -I "$URL_BASE/" --max-time 10)
    echo "$HEADERS" > "$LOG_DIR/headers.txt"
    
    # Verificar headers espec√≠ficos
    if echo "$HEADERS" | grep -q "X-Content-Type-Options"; then
        log_success "Header X-Content-Type-Options presente"
    else
        log_warning "Header X-Content-Type-Options ausente"
    fi
    
    if echo "$HEADERS" | grep -q "X-Frame-Options"; then
        log_success "Header X-Frame-Options presente"
    else
        log_warning "Header X-Frame-Options ausente"
    fi
}

# TESTE 4: Rota de desenvolvimento bloqueada
test_dev_route_blocked() {
    log_info "Verificando se rota de desenvolvimento est√° bloqueada..."
    
    DEV_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "$URL_BASE/setup_admin_dev" --max-time 10)
    
    if [ "$DEV_RESPONSE" = "404" ] || [ "$DEV_RESPONSE" = "403" ]; then
        log_success "Rota de desenvolvimento bloqueada - HTTP $DEV_RESPONSE"
    else
        log_error "Rota de desenvolvimento ACESS√çVEL - RISCO DE SEGURAN√áA! HTTP $DEV_RESPONSE"
    fi
}

# TESTE 5: Performance b√°sica
test_basic_performance() {
    log_info "Testando performance b√°sica..."
    
    TIMES_FILE="$LOG_DIR/performance.txt"
    echo "Teste de Performance - $TIMESTAMP" > "$TIMES_FILE"
    
    for i in {1..5}; do
        START_TIME=$(date +%s.%N)
        curl -s "$URL_BASE/api/clientes/busca_cpf?cpf=123.456.789-00" > /dev/null
        END_TIME=$(date +%s.%N)
        DURATION=$(echo "$END_TIME - $START_TIME" | bc)
        echo "Teste $i: ${DURATION}s" >> "$TIMES_FILE"
        
        if (( $(echo "$DURATION < 2.0" | bc -l) )); then
            log_success "Teste $i: ${DURATION}s - OK"
        else
            log_warning "Teste $i: ${DURATION}s - LENTO"
        fi
    done
}

# TESTE 6: Valida√ß√£o de formul√°rio
test_form_validation() {
    log_info "Testando valida√ß√£o de formul√°rios..."
    
    # Dados com potencial XSS
    FORM_DATA="autor_nome=<script>alert('xss')</script>&autor_email=test@test.com&processo_numero=123"
    
    FORM_RESPONSE=$(curl -s -X POST "$URL_BASE/api/preview-document" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "$FORM_DATA" --max-time 15)
    
    echo "Form Response: $FORM_RESPONSE" >> "$LOG_DIR/form_validation.txt"
    
    if echo "$FORM_RESPONSE" | grep -q "error\|invalid"; then
        log_success "Valida√ß√£o de formul√°rio rejeitando dados maliciosos"
    elif ! echo "$FORM_RESPONSE" | grep -q "<script>"; then
        log_success "Dados maliciosos sanitizados"
    else
        log_error "Poss√≠vel vulnerabilidade XSS detectada!"
    fi
}

# TESTE 7: Verificar estrutura de arquivos cr√≠ticos
test_file_structure() {
    log_info "Verificando estrutura de arquivos implementados..."
    
    FILES_TO_CHECK=(
        "app/validators/cliente_validator.py"
        "app/peticionador/services/suspensao_service.py"
        "app/peticionador/services/formulario_service.py"
        "app/peticionador/services/documento_service.py"
    )
    
    for file in "${FILES_TO_CHECK[@]}"; do
        if [ -f "$file" ]; then
            log_success "Arquivo $file presente"
            wc -l "$file" >> "$LOG_DIR/file_sizes.txt"
        else
            log_error "Arquivo $file AUSENTE"
        fi
    done
}

# TESTE 8: Verificar logs de aplica√ß√£o
test_application_logs() {
    log_info "Verificando logs de aplica√ß√£o..."
    
    if command -v journalctl >/dev/null 2>&1; then
        # √öltimos 50 logs da aplica√ß√£o
        sudo journalctl -u form_google --no-pager -n 50 > "$LOG_DIR/app_logs.txt" 2>/dev/null || {
            log_warning "N√£o foi poss√≠vel acessar logs do systemd"
        }
        
        # Contar erros recentes
        ERROR_COUNT=$(sudo journalctl -u form_google --since "5 minutes ago" | grep -c "ERROR" 2>/dev/null || echo "0")
        
        if [ "$ERROR_COUNT" -lt 5 ]; then
            log_success "Logs normais - $ERROR_COUNT erros recentes"
        else
            log_warning "Muitos erros nos logs - $ERROR_COUNT erros recentes"
        fi
    else
        log_warning "journalctl n√£o dispon√≠vel - pulando verifica√ß√£o de logs"
    fi
}

# FUN√á√ÉO PRINCIPAL
main() {
    echo "========================================="
    echo "üîç EXECU√á√ÉO DE TESTES DE PRODU√á√ÉO"
    echo "========================================="
    
    # Executar todos os testes
    test_app_online || exit 1
    test_cpf_validation
    test_security_headers
    test_dev_route_blocked
    test_basic_performance
    test_form_validation
    test_file_structure
    test_application_logs
    
    # Relat√≥rio final
    echo ""
    echo "========================================="
    echo "üìä RELAT√ìRIO FINAL"
    echo "========================================="
    
    TOTAL_ERRORS=$(grep -c "‚ùå" "$LOG_DIR/teste.log" 2>/dev/null || echo "0")
    TOTAL_SUCCESS=$(grep -c "‚úÖ" "$LOG_DIR/teste.log" 2>/dev/null || echo "0")
    TOTAL_WARNINGS=$(grep -c "‚ö†Ô∏è" "$LOG_DIR/teste.log" 2>/dev/null || echo "0")
    
    echo "‚úÖ Sucessos: $TOTAL_SUCCESS"
    echo "‚ùå Erros: $TOTAL_ERRORS"
    echo "‚ö†Ô∏è  Avisos: $TOTAL_WARNINGS"
    echo "üìÅ Logs salvos em: $LOG_DIR"
    
    if [ "$TOTAL_ERRORS" -eq 0 ]; then
        log_success "TODOS OS TESTES CR√çTICOS PASSARAM!"
        return 0
    else
        log_error "ALGUNS TESTES FALHARAM - REVISAR LOGS"
        return 1
    fi
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 