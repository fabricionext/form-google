#!/bin/bash

echo "üîß CORRE√á√ÉO COMPLETA - VUE PRODUCTION + FRAMEWORK FIXES"
echo "======================================================="

# 1. Backup dos arquivos originais
echo "1Ô∏è‚É£ Criando backups..."
cp html/index.html html/index.html.backup.$(date +%Y%m%d_%H%M%S)
cp templates/_base_peticionador_vuetify.html templates/_base_peticionador_vuetify.html.backup.$(date +%Y%m%d_%H%M%S)
echo "   ‚úÖ Backups criados"

# 2. Trocar Vue Development para Production em todos os arquivos
echo "2Ô∏è‚É£ Corrigindo Vue para Production Build..."

# Procurar e substituir em todos os arquivos HTML
find . -name "*.html" -not -path "./node_modules/*" -not -path "./.git/*" | xargs grep -l "vue.global.js" | while read file; do
    echo "   üîÑ Corrigindo: $file"
    sed -i 's|vue@3\.4\.21/dist/vue\.global\.js|vue@3.4.21/dist/vue.global.prod.js|g' "$file"
    sed -i 's|/vue@3\.4\.21/dist/vue\.global\.js|/vue@3.4.21/dist/vue.global.prod.js|g' "$file"
done

echo "   ‚úÖ Vue Production Build aplicado"

# 3. Verificar e corrigir problemas de framework
echo "3Ô∏è‚É£ Verificando depend√™ncias problem√°ticas..."

# Remover depend√™ncias que podem causar conflitos
if [ -d "node_modules" ]; then
    echo "   ‚ö†Ô∏è  Removendo node_modules da raiz (conflitos)"
    rm -rf node_modules
fi

# Limpar cache de builds antigos
rm -rf .cache
rm -rf frontend/.nuxt
rm -rf frontend/.vite

echo "   ‚úÖ Cache limpo"

# 4. Corrigir problemas espec√≠ficos do Docker
echo "4Ô∏è‚É£ Preparando corre√ß√µes para Docker..."

# Criar script de atualiza√ß√£o para Docker
cat > docker_update_files.sh << 'EOF'
#!/bin/bash
echo "üê≥ Atualizando arquivos no Docker..."

# Copiar arquivos corrigidos para container
docker cp html/index.html form-google-app:/home/app/html/index.html
docker cp templates/_base_peticionador_vuetify.html form-google-app:/home/app/templates/_base_peticionador_vuetify.html

# Reiniciar servi√ßos
docker exec form-google-app supervisorctl restart gunicorn
docker exec form-google-app supervisorctl restart nginx

echo "‚úÖ Arquivos atualizados no Docker"
EOF

chmod +x docker_update_files.sh
echo "   ‚úÖ Script Docker criado"

# 5. Verificar templates duplicados
echo "5Ô∏è‚É£ Verificando templates duplicados..."
if [ -f "templates/peticionador/dashboard.html" ] && [ -f "templates/peticionador/dashboard_vuetify.html" ]; then
    echo "   ‚ö†Ô∏è  Templates dashboard duplicados encontrados"
    echo "      üìÅ dashboard.html"
    echo "      üìÅ dashboard_vuetify.html"
    echo "   üí° Recomenda√ß√£o: usar dashboard_vuetify.html (mais moderno)"
else
    echo "   ‚úÖ Sem duplica√ß√£o de templates"
fi

# 6. Teste de integridade
echo "6Ô∏è‚É£ Teste de integridade dos arquivos..."
ERRORS=0

# Verificar se Vue production foi aplicado
if grep -r "vue.global.js" html/ templates/ 2>/dev/null | grep -v ".backup"; then
    echo "   ‚ùå Ainda h√° refer√™ncias ao Vue development"
    ERRORS=$((ERRORS + 1))
else
    echo "   ‚úÖ Vue production aplicado corretamente"
fi

# Verificar sintaxe HTML b√°sica
for file in html/index.html templates/_base_peticionador_vuetify.html; do
    if [ -f "$file" ]; then
        if grep -q "</html>" "$file" && grep -q "<html" "$file"; then
            echo "   ‚úÖ $file - HTML v√°lido"
        else
            echo "   ‚ùå $file - HTML pode estar corrompido"
            ERRORS=$((ERRORS + 1))
        fi
    fi
done

# 7. Aplicar corre√ß√µes no Docker (se dispon√≠vel)
echo "7Ô∏è‚É£ Aplicando corre√ß√µes no Docker..."
if docker ps | grep -q "form-google-app"; then
    echo "   üê≥ Container encontrado - aplicando corre√ß√µes..."
    ./docker_update_files.sh
    
    # Teste ap√≥s corre√ß√£o
    sleep 5
    HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null https://appform.estevaoalmeida.com.br/cadastrodecliente 2>/dev/null)
    if [ "$HTTP_STATUS" = "200" ]; then
        echo "   ‚úÖ Endpoint p√∫blico funcionando (Status: $HTTP_STATUS)"
    else
        echo "   ‚ö†Ô∏è  Endpoint com status: $HTTP_STATUS"
    fi
else
    echo "   ‚ÑπÔ∏è  Container n√£o encontrado - execute ./docker_update_files.sh ap√≥s iniciar"
fi

# Resultado final
echo ""
echo "======================================================="
if [ $ERRORS -eq 0 ]; then
    echo "üéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo "‚úÖ Vue Production Build aplicado"
    echo "‚úÖ Cache limpo"
    echo "‚úÖ Docker atualizado (se dispon√≠vel)"
    echo ""
    echo "üîó Teste os endpoints:"
    echo "   ‚Ä¢ https://appform.estevaoalmeida.com.br/cadastrodecliente"
    echo "   ‚Ä¢ https://appform.estevaoalmeida.com.br/peticionador/dashboard"
else
    echo "‚ö†Ô∏è  CORRE√á√ÉO PARCIAL - $ERRORS erro(s) encontrado(s)"
    echo "üîß Verifique os problemas acima e execute novamente"
fi

echo ""
echo "üìÖ Corre√ß√£o realizada em: $(date)"
echo "üóÇÔ∏è  Backups salvos em: *.backup.*"
echo "======================================================="

exit $ERRORS 