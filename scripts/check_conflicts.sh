#!/bin/bash

echo "üîç VERIFICANDO CONFLITOS VITE/VUE..."
echo "================================================="

CONFLICTS_FOUND=0

# 1. Verificar assets obsoletos do Vite
echo "1Ô∏è‚É£ Verificando assets Vite obsoletos..."
VITE_ASSETS=$(find html/assets/ -name 'index-*.js' 2>/dev/null)
if [ -n "$VITE_ASSETS" ]; then
    echo "   ‚ùå Assets Vite obsoletos encontrados:"
    echo "$VITE_ASSETS" | sed 's/^/      /'
    CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
else
    echo "   ‚úÖ Sem assets Vite obsoletos"
fi

# 2. Verificar configura√ß√µes duplicadas
echo ""
echo "2Ô∏è‚É£ Verificando configura√ß√µes duplicadas..."
if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
    echo "   ‚ùå Configura√ß√µes Vite conflitantes na raiz:"
    ls -la vite.config.* 2>/dev/null | sed 's/^/      /'
    CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
else
    echo "   ‚úÖ Sem configs Vite conflitantes na raiz"
fi

# 3. Verificar package.json m√∫ltiplos
echo ""
echo "3Ô∏è‚É£ Verificando package.json..."
if [ -f "package.json" ]; then
    echo "   ‚ö†Ô∏è  package.json na raiz pode causar conflitos"
    echo "      Recomendado: mover para package.json.disabled"
    CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
else
    echo "   ‚úÖ package.json limpo na raiz"
fi

# 4. Verificar m√∫ltiplas vers√µes Vue
echo ""
echo "4Ô∏è‚É£ Verificando vers√µes Vue..."
VUE_VERSIONS=$(grep -r "vue@" . --include="*.html" --include="*.json" 2>/dev/null | grep -v node_modules | grep -v disabled)
if [ -n "$VUE_VERSIONS" ]; then
    echo "   ‚ÑπÔ∏è  Vers√µes Vue encontradas:"
    echo "$VUE_VERSIONS" | sed 's/^/      /'
    
    # Contar vers√µes diferentes
    UNIQUE_VERSIONS=$(echo "$VUE_VERSIONS" | grep -o 'vue@[0-9]\+\.[0-9]\+\.[0-9]\+' | sort | uniq | wc -l)
    if [ "$UNIQUE_VERSIONS" -gt 1 ]; then
        echo "   ‚ö†Ô∏è  M√∫ltiplas vers√µes Vue detectadas!"
        CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
    else
        echo "   ‚úÖ Vers√£o Vue consistente"
    fi
else
    echo "   ‚ÑπÔ∏è  Nenhuma vers√£o Vue espec√≠fica encontrada"
fi

# 5. Verificar estrutura de diret√≥rios
echo ""
echo "5Ô∏è‚É£ Verificando estrutura de diret√≥rios..."
if [ -d "frontend/html" ]; then
    echo "   ‚ùå Diret√≥rio frontend/html duplicado encontrado"
    CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
else
    echo "   ‚úÖ Sem diret√≥rios duplicados"
fi

# 6. Verificar node_modules duplicados
echo ""
echo "6Ô∏è‚É£ Verificando node_modules..."
NODE_MODULES_COUNT=$(find . -name "node_modules" -type d 2>/dev/null | grep -v ".git" | wc -l)
if [ "$NODE_MODULES_COUNT" -gt 1 ]; then
    echo "   ‚ö†Ô∏è  M√∫ltiplos node_modules encontrados:"
    find . -name "node_modules" -type d 2>/dev/null | grep -v ".git" | sed 's/^/      /'
    echo "   üí° Recomendado: manter apenas frontend/node_modules"
else
    echo "   ‚úÖ Estrutura node_modules limpa"
fi

# 7. Teste funcional b√°sico
echo ""
echo "7Ô∏è‚É£ Teste funcional b√°sico..."
if command -v curl > /dev/null 2>&1; then
    HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null https://appform.estevaoalmeida.com.br/cadastrodecliente 2>/dev/null)
    if [ "$HTTP_STATUS" = "200" ]; then
        echo "   ‚úÖ Endpoint p√∫blico respondendo (Status: $HTTP_STATUS)"
    else
        echo "   ‚ùå Endpoint p√∫blico com problema (Status: $HTTP_STATUS)"
        CONFLICTS_FOUND=$((CONFLICTS_FOUND + 1))
    fi
else
    echo "   ‚ö†Ô∏è  curl n√£o dispon√≠vel - teste manual necess√°rio"
fi

# Resultado final
echo ""
echo "================================================="
if [ $CONFLICTS_FOUND -eq 0 ]; then
    echo "üéâ SISTEMA LIMPO - Nenhum conflito detectado!"
    echo "‚úÖ Todos os testes passaram"
else
    echo "‚ö†Ô∏è  CONFLITOS DETECTADOS: $CONFLICTS_FOUND problema(s)"
    echo "üîß Execute: ./scripts/cleanup_vite_conflicts.sh"
fi

echo ""
echo "üìÖ Verifica√ß√£o realizada em: $(date)"
echo "üîó Documenta√ß√£o: docs/VITE_VUE_CONFLICT_PREVENTION.md"
echo "================================================="

exit $CONFLICTS_FOUND 