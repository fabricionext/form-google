# Configuração de Segurança Nginx - Rate Limiting e Proteção
# Adicionar ao arquivo principal do nginx para proteção imediata

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;
limit_req_zone $binary_remote_addr zone=admin:10m rate=1r/m;
limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;

# Geo block para IPs conhecidamente maliciosos
geo $blocked_ip {
    default 0;
    204.76.203.211 1;  # IP com 70+ tentativas de força bruta (ATIVO)
    95.214.52.169 1;   # IP com múltiplas tentativas admin
    152.42.166.7 1;    # Tentativas .env e .git/config
    172.202.118.43 1;  # Scanner zgrab detectado
    78.153.140.179 1;  # Tentativa de acesso .env
    202.83.55.203 1;   # Masscan detectado
    74.235.140.14 1;   # Scanner zgrab
    5.101.64.6 1;      # Múltiplas tentativas exploração
    185.242.226.115 1; # Scanning ativo
}

# Configuração do servidor
server {
    listen 80;
    server_name appform.estevaoalmeida.com.br;
    
    # Bloquear IPs maliciosos imediatamente
    if ($blocked_ip) {
        return 444;  # Fecha conexão sem resposta
    }
    
    # Rate limiting para endpoints específicos
    location ~* /admin|/login|/boaform {
        limit_req zone=admin burst=2 nodelay;
        limit_req_status 429;
        
        # Log tentativas suspeitas
        access_log /var/log/nginx/security.log combined;
        
        # Headers de segurança
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # Continua para aplicação
        try_files $uri @app;
    }
    
    # Rate limiting global
    location / {
        limit_req zone=global burst=20 nodelay;
        limit_req_status 429;
        
        # Bloquear user-agents maliciosos
        if ($http_user_agent ~* "masscan|zgrab|sqlmap|nikto|nmap") {
            return 444;
        }
        
        # Bloquear tentativas de acesso a arquivos sensíveis
        location ~* \.(env|git|sql|log|backup|bak)$ {
            deny all;
            return 404;
        }
        
        # Continua para aplicação
        try_files $uri @app;
    }
    
    # Upstream para aplicação Flask
    location @app {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout de segurança
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
    }
    
    # Página de erro personalizada para rate limiting
    error_page 429 @rate_limit;
    location @rate_limit {
        add_header Content-Type text/plain always;
        return 429 "Rate limit exceeded. Too many requests.";
    }
    
    # Ocultar versão do nginx
    server_tokens off;
}

# Configurações adicionais de segurança
# Adicionar no contexto http do nginx.conf principal:

# Limitar tamanho do corpo da requisição
client_max_body_size 10M;

# Timeout de conexão
client_body_timeout 10s;
client_header_timeout 10s;

# Buffer sizes (proteção contra overflow)
client_body_buffer_size 128k;
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# Log de segurança personalizado
log_format security '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '"$http_x_forwarded_for" rt=$request_time';

access_log /var/log/nginx/security.log security;