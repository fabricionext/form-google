###############################################################################
#  üî•  PROJETO PYTHON / FLASK ‚Äì .gitignore                                   #
#  Inspirado nos templates do GitHub + boas pr√°ticas de deploy               #
###############################################################################

########################
# 1. Compila√ß√£o Python #
########################
__pycache__/
*.py[cod]
*$py.class
*.pyo

##############################
# 2. Ambientes Virtuais      #
##############################
# virtualenv / pipenv / poetry
.env/
.venv/
venv/
env/
ENV/
# pyenv venvs (diret√≥rio local)
.python-version

#########################
# 3. Gerenciadores de Pacotes
#########################
# pip-tools
requirements*.txt
!requirements.txt
# Poetry
poetry.lock
# conda
conda-meta/

#########################
# 4. Vari√°veis de Ambiente #
#########################
.env
.env.*
!.env.example        # mantenha um exemplo para documenta√ß√£o

#########################
# 5. Ferramentas Python  #
#########################
.pytest_cache/
.coverage
htmlcov/
nosetests.xml
coverage.xml
.tox/
.mypy_cache/
.dmypy.json
.pyre/
bandit_report.json

##################################
# 6. Build / Distribui√ß√£o Python #
##################################
dist/
build/
*.egg-info/
*.wheel
pip-wheel-metadata/

############################
# 7. Logs & Outras Sa√≠das  #
############################
*.log
logs/
*.sqlite3
instance/         # pasta padr√£o do Flask para configs/DB locais
*.db
*.bak
*.tmp
*.swp

##############################
# 8. IDEs e Editores         #
##############################
# VS Code
.vscode/
# PyCharm / IntelliJ
.idea/
# Eclipse / PyDev
.project
.pydevproject
# macOS / Windows
.DS_Store
Thumbs.db

###########################
# 9. Docker & Containeres #
###########################
# Build e runtime
docker-compose.override.yml
.docker/
docker-data/
# Volumes
volumes/
# Imagens geradas
*.tar

##########################
# 10. Front-end (Node)   #
##########################
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
package-lock.json
yarn.lock
.pnpm-debug.log

# Vite / Webpack / Parcel builds
dist-frontend/
build-frontend/
*.bundle.js
*.map

##################################
# 11. Documenta√ß√£o & CI tempor√°rio
##################################
# Sphinx / MkDocs
_build/
site/
# Coverage badge tempor√°rio
coverage_badge.svg
# Artefatos de CI
*.cache
*.pytest_cache

#####################################
# 12. Arquivos de Sistemas Operacionais
#####################################
# Linux
*~
# Windows
desktop.ini
# macOS adicionais
.AppleDouble
.LSOverride

##########################
# 13. Credenciais e Seguran√ßa #
##########################
# Google Cloud Service Account
app-script-*.json
*service-account*.json
*credentials*.json
client_secret*.json
*.pem
*.key
*.crt
*.p12
*.pfx

# Certificados SSL/TLS
cert.pem
key.pem
*.crt
*.key

# Cookies e dados de sess√£o
cookies.txt
*.session
*.cache

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Backup files
database_backup_*.sql
!database_backup_20250623_222107.sql

# Logs
logs/*.log
!logs/.gitkeep

# Temporary files
*.tmp
*.temp

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db